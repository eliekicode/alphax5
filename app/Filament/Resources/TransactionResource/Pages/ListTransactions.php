<?php

namespace App\Filament\Resources\TransactionResource\Pages;

use App\Enums\Transaction\TransactionStatus;
use App\Filament\Resources\TransactionResource;
use Filament\Actions;
use Filament\Facades\Filament;
use Filament\Pages\Concerns\ExposesTableToWidgets;
use Filament\Resources\Components\Tab;
use Filament\Resources\Pages\ListRecords;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;

class ListTransactions extends ListRecords
{
    use ExposesTableToWidgets;

    protected static string $resource = TransactionResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\CreateAction::make()->visible(
                $this->getTenant()
                    ->pendingTransactions()
                    ->whereNull('deleted_at')
                    ->count() === 0
            ),
        ];
    }

    public function getTabs(): array
    {
        return [
            'all' => Tab::make(),
            'pending' => $this->getTab(TransactionStatus::PENDING,'heroicon-m-user-group','warning'),
            'approved' => $this->getTab(TransactionStatus::APPROVED,'heroicon-m-user-group','primary'),
            'succeed' => $this->getTab(TransactionStatus::SUCCEED,'heroicon-m-user-group','success'),
            'canceled' => $this->getTab(TransactionStatus::REJECTED,'heroicon-m-user-group','danger'),
        ];
    }

    private function getTab(TransactionStatus $status, ?string $iconName = null, ?string $badgeColor = null): Tab
    {
        return Tab::make()
            ->icon($iconName)
            ->badge($this->getBadgeCountByStatus($status))
            ->badgeColor($badgeColor)
            ->modifyQueryUsing(fn(Builder $query) => $query->where('status', $status->value));
    }

    private function getTenant(): ?Model
    {
        return Filament::getTenant();
    }

    private function getBadgeCountByStatus(TransactionStatus $status): int
    {
        return $this->getTableQuery()->where('status', $status->value)->count();
    }

    protected function getTableQuery(): ?Builder
    {
        return parent::getTableQuery()->whereNull('deleted_at'); // TODO: Change the autogenerated stub
    }

    protected function getHeaderWidgets(): array
    {
        return [
            TransactionResource\Widgets\StatsWidget::class
        ];
    }
}
